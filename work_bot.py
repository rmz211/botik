import logging
import asyncio
import csv
import random
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.markdown import link
from texts import TEXTS  # –ò–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ texts.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7766616488:AAHgpgnwaZCgZ65nekHyViNkxxPQRUH7MCs'
ADMIN_ID = 5199397925
QUOTES_FILE = "quotes.txt"
ANALYTICS_FILE = "analytics.csv"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")],
        [KeyboardButton(text="–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"), KeyboardButton(text="–ü—Ä–æ—á–µ–µ")],
        [KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê")]
    ],
    resize_keyboard=True
)

tasks_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã"), KeyboardButton(text="–ì—É–≥–ª –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="–ê–≤–∏—Ç–æ"), KeyboardButton(text="–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

language_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫"), KeyboardButton(text="English üá¨üáß")]
    ],
    resize_keyboard=True
)

user_languages = {}


USERS_FILE = "users.csv"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def log_user(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ
    users = set()
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as file:
            users = {line.strip() for line in file}
    except FileNotFoundError:
        pass

    if str(user_id) not in users:
        with open(USERS_FILE, "a", encoding="utf-8") as file:
            file.write(f"{user_id}\n")

    # –õ–æ–≥–∏—Ä—É–µ–º –≤ analytics.csv
    with open(ANALYTICS_FILE, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([datetime.now(), user_id, user_name])


@dp.message(Command("start"))
async def send_welcome(message: Message):
    log_user(message)
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {message.from_user.id})")
    await message.answer(TEXTS["start"].format(name=message.from_user.full_name), reply_markup=main_menu)

@dp.message(lambda message: message.text == "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê")
async def change_language(message: Message):
    await message.answer(TEXTS["language_prompt"], reply_markup=language_menu)

@dp.message(lambda message: message.text in ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"])
async def set_language(message: Message):
    lang = "ru" if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else "en"
    user_languages[message.from_user.id] = lang
    await message.answer(TEXTS["language_changed"][lang], reply_markup=main_menu)

@dp.message(lambda message: message.text in ["–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü—Ä–∞–≤–∏–ª–∞", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç", "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", "–ü—Ä–æ—á–µ–µ"])
async def handle_main_menu(message: Message):
    text_map = {
        "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": TEXTS["main_info"],
        "–ü—Ä–∞–≤–∏–ª–∞": TEXTS["rules"],
        "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç": TEXTS["price_list"],
        "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã": TEXTS["projects"],
        "–ü—Ä–æ—á–µ–µ": TEXTS["other"]
    }
    await message.answer(text_map[message.text], parse_mode="Markdown")

@dp.message(lambda message: message.text == "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def handle_tasks_menu(message: Message):
    await message.answer(TEXTS["tasks_prompt"], reply_markup=tasks_menu)

@dp.message(lambda message: message.text in ["–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã", "–ì—É–≥–ª –∫–∞—Ä—Ç—ã", "–ê–≤–∏—Ç–æ", "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
async def handle_tasks_submenu(message: Message):
    task_map = {
        "–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã": TEXTS["yandex_tasks"],
        "–ì—É–≥–ª –∫–∞—Ä—Ç—ã": TEXTS["google_tasks"],
        "–ê–≤–∏—Ç–æ": TEXTS["avito_task"],
        "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": TEXTS["back_to_main"]
    }
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –æ—Ç—á–µ—Ç", url="https://t.me/rogwork_bot")]
    ]) if message.text != "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" else main_menu

    await message.answer(task_map[message.text], parse_mode="Markdown", reply_markup=keyboard)

async def send_daily_quotes():
    while True:
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as file:
                user_ids = [line.strip() for line in file]

            with open(QUOTES_FILE, "r", encoding="utf-8") as file:
                quotes = file.readlines()

            if quotes and user_ids:
                random_quote = random.choice(quotes).strip()
                for user_id in user_ids:
                    try:
                        await bot.send_message(user_id, f"üí° _{random_quote}_", parse_mode="Markdown")
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ send_daily_quotes: {e}")

        await asyncio.sleep(600)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(send_daily_quotes())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

